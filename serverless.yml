service: codepipeline-watch

provider:
  stackName: ${opt:stack-name, self:custom.config.overrides.stack-name, "codepipeline-watch-${opt:stage, 'production'}"}
  name: aws
  stage: ${opt:stage, 'production'}
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-1'}

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  config:
    default: ${file(./serverless-default-config.yml)}
    overrides: ${file(${opt:config-file, './serverless-empty-config.yml'})}
    slack:
      channel: ${self:custom.config.overrides.slack.channel, env:SLACK_CHANNEL, self:custom.config.default.slack.channel}
      token: ${self:custom.config.overrides.slack.token, env:SLACK_TOKEN, self:custom.config.default.slack.token}
    github:
      token: ${self:custom.config.overrides.github.token, env:GITHUB_AUTH_TOKEN, self:custom.config.default.github.token}
    dynamodb:
      table: ${self:custom.config.overrides.dynamodb.table, env:DYNAMODB_TABLE, self:custom.config.default.dynamodb.table}
      # §todo: more config to be added

functions:

  codepipeline-watch:
    handler: lambda/aws-slack-codepipeline-watch.handler
    name: codepipeline-watch
    role: CodepipelineWatchLambdaRole
    memorySize: 128
    timeout: 60
    environment:
      SLACK_TOKEN: ${self:custom.config.slack.token}
      SLACK_CHANNEL: ${self:custom.config.slack.channel}
      GITHUB_AUTH_TOKEN: ${self:custom.config.github.token}
      DYNAMO_TABLE:
        Ref: DynamoTable
    events:
      - cloudwatchEvent:
          name: CodepipelineWatchCloudwatchEventTrigger
          description: "Event triggering CodepipelineWatch from codepipeline events"
          event:
            source:
              - aws.codepipeline

resources:
  Description: Cloudformation for the Codepipeline Watch App
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.dynamodb.table}
        AttributeDefinitions:
          - AttributeName: projectName
            AttributeType: S
          - AttributeName: executionId
            AttributeType: S
        KeySchema:
          - AttributeName: projectName
            KeyType: HASH
          - AttributeName: executionId
            KeyType: RANGE
        ProvisionedThroughput: # §todo: make it configurable
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        # No TTL §TODO: add some
        Tags:
          - Key: Name
            Value: ${self:custom.config.dynamodb.table}
    WriteCapacityScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 25
        MinCapacity: 5
        ResourceId:
          Fn::Join: ["/", [table, {Ref: DynamoTable}]]
        RoleARN:
          Fn::GetAtt: ScalingRole.Arn
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    ReadCapacityScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 25
        MinCapacity: 5
        ResourceId:
          Fn::Join: ["/", [table, {Ref: DynamoTable}]]
        RoleARN:
          Fn::GetAtt: ScalingRole.Arn
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    ScalingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CodepipelineWatchDynamodbScalingRoleFor${self:provider.region}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - application-autoscaling.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: "root"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DescribeTable"
                    - "dynamodb:UpdateTable"
                    - "cloudwatch:PutMetricAlarm"
                    - "cloudwatch:DescribeAlarms"
                    - "cloudwatch:GetMetricStatistics"
                    - "cloudwatch:SetAlarmState"
                    - "cloudwatch:DeleteAlarms"
                  Resource: "*"
    WriteScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: WriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 80
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    ReadScalingPolicy:
      Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: ReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 80
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization

    CodepipelineWatchLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CodepipelineWatchAccessRoleFor${self:provider.region}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:   # (details see: https://serverless.com/framework/docs/providers/aws/guide/iam/)
          - PolicyName: AccessToDynamodbTable
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Resource:
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:dynamodb'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - table/${self:custom.config.dynamodb.table}
                  Action:
                    - "dynamodb:Get*"
                    - "dynamodb:Update*"
                    - "dynamodb:PutItem"
                  Effect: Allow
